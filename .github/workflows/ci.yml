name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy, llvm-tools-preview
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-llvm-cov
      run: |
        if ! command -v cargo-llvm-cov &> /dev/null; then
          cargo install cargo-llvm-cov
        fi
    
    - name: Format check
      run: cargo fmt --all -- --check
    
    - name: Clippy
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -A clippy::module_name_repetitions \
          -A clippy::must_use_candidate \
          -A clippy::missing_errors_doc \
          -A clippy::missing_const_for_fn \
          -A clippy::return_self_not_must_use \
          -A clippy::missing_fields_in_debug \
          -A clippy::uninlined_format_args \
          -A clippy::if_not_else \
          -A clippy::result_large_err \
          -A clippy::multiple_crate_versions \
          -A clippy::implicit_hasher \
          -A clippy::unused_async \
          -A clippy::cast_lossless \
          -A clippy::redundant_clone \
          -A clippy::redundant_closure_for_method_calls \
          -A clippy::significant_drop_tightening \
          -A clippy::missing_panics_doc \
          -A clippy::cast_possible_truncation \
          -A clippy::cast_precision_loss \
          -A clippy::option_if_let_else \
          -A clippy::derive_partial_eq_without_eq \
          -A clippy::redundant_else \
          -A clippy::match_same_arms
    
    - name: Build
      run: cargo build --all-features --verbose
    
    - name: Run tests
      run: cargo test --all-features --verbose -- --test-threads=1
    
    - name: Run doctests
      run: cargo test --doc --all-features --verbose
    
    - name: Check examples
      run: |
        for example in examples/*.rs; do
          if [[ -f "$example" ]]; then
            example_name=$(basename "$example" .rs)
            # Skip examples that require special feature flags
            if [[ "$example_name" == "09_authentication" ]]; then
              echo "Skipping example: $example_name (requires authentication_example feature)"
              continue
            fi
            if [[ "$example_name" == "10_progress_notifications" ]]; then
              echo "Skipping example: $example_name (requires progress_example feature)"
              continue
            fi
            if [[ "$example_name" == "11_request_cancellation" ]]; then
              echo "Skipping example: $example_name (requires cancellation_example feature)"
              continue
            fi
            if [[ "$example_name" == "13_websocket_transport" ]] || \
               [[ "$example_name" == "27_websocket_server_enhanced" ]]; then
              echo "Skipping example: $example_name (requires websocket feature)"
              continue
            fi
            if [[ "$example_name" == "18_resource_watcher" ]]; then
              echo "Skipping example: $example_name (requires resource-watcher feature)"
              continue
            fi
            if [[ "$example_name" == "22_streamable_http_server_stateful" ]] || \
               [[ "$example_name" == "23_streamable_http_server_stateless" ]] || \
               [[ "$example_name" == "24_streamable_http_client" ]]; then
              echo "Skipping example: $example_name (requires streamable-http feature)"
              continue
            fi
            if [[ "$example_name" == "32_typed_tools" ]] || \
               [[ "$example_name" == "33_advanced_typed_tools" ]] || \
               [[ "$example_name" == "34_serverbuilder_typed" ]] || \
               [[ "$example_name" == "35_wasm_typed_tools" ]] || \
               [[ "$example_name" == "36_typed_tool_v2_example" ]] || \
               [[ "$example_name" == "37_description_variants_example" ]]; then
              echo "Skipping example: $example_name (requires schema-generation feature)"
              continue
            fi
            if [[ "$example_name" == "28_sse_optimized" ]]; then
              echo "Skipping example: $example_name (requires sse feature)"
              continue
            fi
            if [[ "$example_name" == "29_connection_pool" ]] || \
               [[ "$example_name" == "30_enhanced_middleware" ]] || \
               [[ "$example_name" == "31_advanced_error_recovery" ]]; then
              echo "Skipping example: $example_name (requires full feature)"
              continue
            fi
            echo "Checking example: $example_name"
            # Most examples need at least http feature for tokio
            cargo check --example "$example_name" --features http
          fi
        done
    
    - name: Run coverage
      run: cargo llvm-cov --all-features --lcov --output-path lcov.info

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install quality tools
      run: |
        if ! command -v cargo-llvm-cov &> /dev/null; then
          cargo install cargo-llvm-cov
        fi
        if ! command -v cargo-nextest &> /dev/null; then
          cargo install cargo-nextest
        fi
        if ! command -v cargo-audit &> /dev/null; then
          cargo install cargo-audit
        fi
    
    - name: Run quality gate
      run: make quality-gate

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: cargo bench --all-features --no-run

  msrv:
    name: Minimum Supported Rust Version (1.82)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust 1.82
      uses: dtolnay/rust-toolchain@1.82
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-msrv-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check MSRV
      run: cargo check --all-features